buildscript {
	ext {
        commonsIoVersion = "2.6"
        groovyVersion = '2.4.14'
        groovyHttpBuilderVersion = '0.7.1'
        jsr305Version = '3.0.2'
        spockVersion = '1.1-groovy-2.4'
		springBootVersion = '2.0.0.RELEASE'
        swaggerVersion = "2.6.1"
        mooworkNodeVersion = "1.2.0"
    }
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:$mooworkNodeVersion"
	}
}

configure(allprojects) {
    apply plugin: 'idea'

    group 'com.dwalczak'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    if (project.name == 'frontend') {
        return
    }

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }
    }
    dependencies {
        if (project.name != 'model') {
            compile "org.springframework:spring-context"
            compile "ch.qos.logback:logback-classic"
            compile project(':model')
        }
        compile "com.google.code.findbugs:jsr305:$jsr305Version"
        compileOnly "org.projectlombok:lombok"
        testCompile "org.spockframework:spock-core:$spockVersion"
    }
}


project('adapter-newsapi') {
    dependencies {
        compile "org.springframework:spring-web"
        compile "commons-io:commons-io:$commonsIoVersion"
    }
}

project('service') {
    dependencies {
        compile project(':adapter-newsapi')
        compile 'javax.validation:validation-api'
    }
}

project('web-rs') {
    apply plugin: 'org.springframework.boot'
    apply plugin: "com.moowork.node"

    dependencies {
        compile project(':service')
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "io.springfox:springfox-swagger2:$swaggerVersion"
        compile "io.springfox:springfox-swagger-ui:$swaggerVersion"
        testCompile "org.springframework.boot:spring-boot-starter-test"
    }

    test {
        environment 'newsapi_org_api_key', 'FAKE_API_KEY'
    }

    bootRun {
        if (!project.hasProperty('disableFrontendDev')) {
            dependsOn ':frontend:buildClientDev'
            sourceResources sourceSets.main
        }
        doFirst {
            environment 'newsapi_org_api_key', Utils.getSystemProperty('newsapi_org_api_key')
        }
    }

    jar.dependsOn(':frontend:buildClient')

}

project('test-rs') {
    apply plugin: 'groovy'
    sourceSets {
        integrationTest {
            groovy.srcDir 'src/integration/groovy'
        }
    }
    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }
    dependencies {
        integrationTestCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
        integrationTestCompile "org.codehaus.groovy.modules.http-builder:http-builder:$groovyHttpBuilderVersion"
        integrationTestCompile "org.spockframework:spock-core:$spockVersion"
    }
    task integrationTest(type: Test) {
        description = "Runs integrations tests. "
        tasks.integrationTest.setGroup('Verification')
        testClassesDirs = sourceSets.integrationTest.output.getClassesDirs()
        classpath = sourceSets.integrationTest.runtimeClasspath
        // always run no cache
        outputs.upToDateWhen { false }
    }
}

project('frontend') {
    apply plugin: 'com.moowork.node'

    node {
        version = '8.10.0'
        download = true
        nodeModulesDir = file("${project.projectDir}")
    }

    task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
        group = 'build'
        description = 'Compile client side folder for development'
        args = ['run', 'buildDev']
    }
    task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
        group = 'build'
        description = "Compile client side folder for production"
        args = ['run', 'build']
    }
    task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
        group = 'application'
        description = "Build and watches the client side assets for rebuilding"
        args = ['run', 'buildWatch']
    }
}

SwaggerTasks.addTasks(project)
DockerTasks.addTasks(project)
